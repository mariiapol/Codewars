def pow(n,matrix,I):
    #Calculates the nth Fibonacci number
    
    if n == 0:
        return I
    if n == 1:
        return matrix
    
    A = pow(n // 2,matrix,I)
    A = multiplication(A,A)
    if n % 2:
        A = multiplication(matrix,A)
    return A

        
    
def multiplication(A,B):
    return [[A[0][0]*B[0][0]+A[0][1]*B[1][0],A[0][0]*B[0][1]+A[0][1]*B[1][1]],[A[1][0]*B[0][0]+A[1][1]*B[1][0],A[1][0]*B[0][1]+A[1][1]*B[1][1]]]

    
    
def fib(n):
        matrix = [[0,1],[1,1]]
        I = [[1,0],[0,1]]
        if n < 0:
            return (-1)**(-n+1)*pow(-n,matrix,I)[0][1]
        else:
            return  pow(n,matrix,I)[0][1]
